✅ Día 1 – Setup del Proyecto + Base común
Ambos

Crear repo en GitHub con ramas: main, dev, feature/login, feature/chat, etc.

Crear estructura de carpetas según división.

Crear archivo requirements.txt con Flask, Flask-SocketIO, etc.

Instalar servidor local PHP para vistas (XAMPP/Laragon/etc).

Crear archivo index.php que redirige según sesión.

Comenzar diagrama de base de datos (docs/bd_diagrama.png).

📦 Entrega: estructura lista + conexión básica PHP y Flask corriendo local.

✅ Día 2 – Base de datos + modelos
Persona A

Crear modelo user.py (nombre, correo, contraseña).

Crear conexión a base de datos (database.py).

Persona B

Crear modelo message.py (emisor, receptor, contenido, timestamp).

Crear script SQL para crear las tablas.

📦 Entrega: DB conectada desde Python y estructuras listas.

✅ Día 3 – Registro (backend + frontend)
Persona B

Crear register_routes.py y lógica para guardar usuarios.

Validaciones básicas en backend.

Persona A

Maquetar register.php + JS (register.js) para enviar datos a backend con fetch().

📦 Entrega: formulario de registro funcionando y guardando en la DB.

✅ Día 4 – Login (backend + frontend)
Persona A

Crear login_routes.py, lógica de login, y manejo de sesión o token.

WebSocket de login para enviar evento “usuario conectado”.

Persona B

Maquetar login.php + JS (login.js) para enviar datos al backend.

📦 Entrega: login funcional con validación y redirección al chat.

✅ Día 5 – WebSocket de presencia
Persona A

Implementar websocket_login/socket_events.py.

Enviar eventos de conexión/desconexión.

Persona A y B

socket_login.js: recibir eventos y actualizar la lista de usuarios conectados.

📦 Entrega: usuarios conectados se ven en tiempo real en el chat.

✅ Día 6 – Chat: back
Persona B

Crear chat/routes.py y controller.py.

Endpoints: GET /messages?with=userId, POST /messages.

📦 Entrega: backend para enviar y obtener mensajes funcional.

✅ Día 7 – Chat: front
Persona A

Maquetar chat.php con lista de mensajes y caja de texto.

Conectar con chat.js y backend (fetch()).

📦 Entrega: se puede ver el historial y enviar mensajes.

✅ Día 8 – WebSocket de mensajes
Persona B

Crear chat/socket_events.py: emitir mensaje nuevo en tiempo real.

Crear socket_chat.js: recibir e insertar mensaje en el chat.

📦 Entrega: mensajes llegan en tiempo real al destinatario conectado.

✅ Día 9 – Estilos y componentes
Ambos

Crear style.css: chat bonito, login responsive.

Separar componentes en header.php, user-list.php, message-list.php.

📦 Entrega: interfaz agradable y ordenada, como mini-Discord 😎

✅ Día 10 – Refactor + documentación
Ambos

Revisan el código del otro.

Refactor de funciones duplicadas, mejoras en la estructura.

Terminar README.md, documentar endpoints, sockets y estructura.

Exportar diagrama ER final.

📦 Entrega: proyecto cerrado, documentado y listo para desplegar.

📝 Extra: ¿Y si hay más días?
Dale duro a esto si sobra tiempo:

Autenticación con JWT.

Agregar emojis, estado “escribiendo…”.

Subida de archivos/imágenes.

Notificaciones push o por correo.

Guardado de mensajes sin conexión por localStorage.